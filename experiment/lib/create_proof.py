import argparse
import pickle
import create_blockchain_new as blockchain_utils

"""
This file contains useful functions to export and import proofs.
The proofs are stored to and imported from .pkl files.
The names of the proofs are refering to the chain they were created by.
For example, proof_100.pkl contains a proof created by a 100-sized Blockchain. Notice that the size of the proof is different.

The iteration of the proofs behins from the last block.

 Genesis
 |
 |
 v    proof
 --------------->
 ^              ^
 |              |
 block[-1]      block[0]

------------------------------------------------------------------------------------------

It is possible to generate fork proofs. That is, proofs of a chain that has a common ancestor with another one.


 Block of interest contained in both chains
 --------+-------->  Pa
         |
         +--->       Pb

The name of the fok chain is proof_<B>_-<f>_<b>

Where
B: Size:        The nuumber of blocks of the original chain
f: Fork index:  The index of the common ancestor of the two chains
b: Fork blocks: The number of block included only to the forked chain

"""

"""
Returns the path of the proof folder
"""
def prefix():
    return '../proofs/'

"""
Loads a proof from a pkl file
"""
def import_proof(filename):
    pickle_in = open(filename,'rb')
    proof = pickle.load(pickle_in)
    return proof

"""
Stores a proof to a pkl file
"""
def export_proof(proof, filename):
    pickle_out = open(filename, 'wb')
    pickle.dump(proof, pickle_out)
    pickle_out.close()
    print("Proof was written in " + filename)

"""
Create a proof and stores it to a pkl file
"""
def create_proof(blocks, filename):
    header, headerMap, mapInterlink = blockchain_utils.create_blockchain(blocks=blocks)
    proof = blockchain_utils.make_proof(header, headerMap, mapInterlink)
    export_proof(proof, filename)
    return proof

"""
Returns the name of the proof name with regard to the size of the underlying chain
"""
def make_proof_file_name(blocks):
    return prefix() + 'proof_'+str(blocks)+'.pkl'

"""
Returns the name of the proof name with regard to the size of the underlying main chain and fork chain

Genesis
|
v
--------+----------->   Main proof (size 100)
        |
^       +----->     ^   Fork proof (size  70)
|                   |
|       ^     ^     |
|       |     |     |
100    50    20     0   Main fork index

<---size 70--->
<------size 100----->


main proof: proof_100.pkl
fork chain: proof_100_-50_+20.pkl
"""
def make_fork_proof_file_name(mainblocks, fork_index, forkblocks):
    return prefix() + str(mainblocks) + '_-' + str(fork_index) + '_+' + str(forkblocks) + '.pkl'

"""
Returns a proof generated by a chain of the size of the given number of blocks
If the proof does not exist, it will be created first with the known name convension.
"""
def get_proof(blocks):
    proof_file_name = make_proof_file_name(blocks)
    f = None
    try:
        f = open(proof_file_name)
        print('File', proof_file_name, 'already exists. Importing...')
        proof = import_proof(proof_file_name)
        f.close()
    except IOError:
        print('File', proof_file_name, 'does not exist. Creating...')
        proof = create_proof(blocks, proof_file_name)
    finally:
        print('...ok')

    return proof

"""
Returns the names of a mainchain proof and a forkchain proof.
If either of the two proofs does not exist, it is created with the known name convension
See documentation of 'make_fork_proof_file_name()'
"""
def create_mainproof_and_forkproof(mainblocks, fork_index, forkblocks):

    header = None
    headerMap = None
    mapInterlink = None

    proof_filename = make_proof_file_name(mainblocks)
    fork_proof_filename = make_fork_proof_file_name(mainblocks, fork_index, forkblocks)

    try:
        open(fork_proof_filename)
    except IOError:
        header, headerMap, mapInterlink = blockchain_utils.create_blockchain(blocks=mainblocks)

    proof = get_proof(mainblocks)

    f = None
    try:
        f = open(fork_proof_filename)
        print('File', fork_proof_filename, 'already exists. Importing...')
        f.close()
    except IOError:
        print('File', fork_proof_filename, 'does not exist. Creating...')
        header_f, headerMap_f, mapInterlink_f = blockchain_utils.create_fork(header,
                                                         headerMap,
                                                         mapInterlink,
                                                         fork=fork_index,
                                                         blocks=forkblocks)

        proof_f = blockchain_utils.make_proof(header_f, headerMap_f, mapInterlink_f)

        pickle_out = open(fork_proof_filename, 'wb')
        pickle.dump(proof_f, pickle_out)
        pickle_out.close()
        print('Created fork at ' + fork_proof_filename)
    finally:
        print('...ok')

    return (make_proof_file_name(mainblocks), fork_proof_filename)

"""
Test for creating proofs
"""
def main():
    parser=argparse.ArgumentParser(description='Create and store proof from create_blockchain_new.py')
    parser.add_argument('--blocks', required=True, type=int, help='Number of blocks')
    args=parser.parse_args()
    blocks=args.blocks
    proof=get_proof(blocks)
    print('Proof size:', len(proof))

if __name__ == "__main__":
    main()
